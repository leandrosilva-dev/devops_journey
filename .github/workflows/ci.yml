name: CI Pipeline - Develop branch

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up a Python environment
        with:
          python-version: '3.9' # Specify the Python version to use. Ensure it's compatible with your app.

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: app/

      - name: Run Unit Tests
        run: |
          pytest test_app.py
        working-directory: app/

      - name: Run Integration Tests
        run: |
          chmod +x run_integration_tests.sh
          ./run_integration_tests.sh
        working-directory: app/

      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }} # Your Docker Hub username (stored as a GitHub Secret)
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} # Your Docker Hub password (stored as a GitHub Secret)
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/devops-journey # The name of your Docker image
          IMAGE_TAG: ${{ github.sha }} # Use the commit SHA as the image tag for unique versions
        run: |
          echo "--- Logging into Docker Hub ---"
          # Log in to Docker Hub using your secrets
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          
          echo "--- Building Docker Image: ${IMAGE_NAME}:${IMAGE_TAG} ---"
          # Build the Docker image. The '.' at the end means Dockerfile is in the current directory.
          # If your Dockerfile is located in the 'app/' directory, you would change '.' to 'app/'.
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          
          echo "--- Pushing Docker Image: ${IMAGE_NAME}:${IMAGE_TAG} ---"
          # Push the built Docker image to Docker Hub
          docker push $IMAGE_NAME:$IMAGE_TAG
          echo "Docker image ${IMAGE_NAME}:${IMAGE_TAG} pushed successfully."
        working-directory: app/
        # By default, this step runs from the root of your repository.
        # Adjust 'working-directory' here if your Dockerfile is not at the repository root.